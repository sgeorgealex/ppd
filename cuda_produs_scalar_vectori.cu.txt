#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <iostream>

__global__ void loop(int *c, const int *a, const int *b, unsigned int size)
{
	int i = blockIdx.x * blockDim.x + threadIdx.x;
	printf("This is iteration number %d\n", i);

	if (i < size)
	{
		*c += a[i] * b[i];
	}
	
}

int main()
{
	const int arraySize = 100;
	int a[arraySize];
	int b[arraySize];
	int c = 0;
	int *dev_a = 0;
	int *dev_b = 0;
	int *dev_c = 0;

	std::fill_n(a, arraySize, 2);
	std::fill_n(b, arraySize, 3);

	cudaMalloc((void**)&dev_c, sizeof(int));
	cudaMalloc((void**)&dev_a, arraySize * sizeof(int));
	cudaMalloc((void**)&dev_b, arraySize * sizeof(int));

	cudaMemcpy(dev_a, a, arraySize * sizeof(int), cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, b, arraySize * sizeof(int), cudaMemcpyHostToDevice);

	loop << <arraySize, 1>> >(dev_c, dev_a, dev_b, arraySize);
	cudaDeviceSynchronize();
	cudaThreadSynchronize();

	cudaMemcpy(&c, dev_c, sizeof(int), cudaMemcpyDeviceToHost);

	printf("Rezultat %d\n", c);
}